import React from 'react';
import * as Forms from '@formspree/core';
import { Client, SubmissionResponse, FormError as FormError$1, SubmissionData } from '@formspree/core';
export { isFieldError } from '@formspree/core';
export { CardElement } from '@stripe/react-stripe-js';

type FromspreeContextType = {
    client: Client;
};
type FormspreeProviderProps = {
    project?: string;
    children: React.ReactNode;
    stripePK?: string;
};
declare const FormspreeProvider: (props: FormspreeProviderProps) => React.JSX.Element;
declare function useFormspree(): FromspreeContextType;

type FormError = Forms.FormError;
type FieldError = Forms.FieldError;
/**
 * ExtraData values can be strings or functions that return a string, or a
 * promise that resolves to a string. Errors should be handled internally.
 * Functions can return undefined to skip this ExtraData value.
 */
type ExtraDataValue = undefined | string | (() => string) | (() => Promise<string>) | (() => undefined) | (() => Promise<undefined>);
type ExtraData = {
    [key: string]: ExtraDataValue;
};
type ErrorPayload = Forms.FormError;

type FormEvent = React.FormEvent<HTMLFormElement>;
type SubmitHandler = (submissionData: FormEvent | SubmissionData) => Promise<SubmissionResponse>;
type ResetFunction = () => void;
type TUseForm = [
    {
        result: SubmissionResponse | null;
        submitting: boolean;
        succeeded: boolean;
        errors: FormError$1[];
    },
    SubmitHandler,
    ResetFunction
];
declare const useForm: (formKey: string, args?: {
    client?: Client;
    data?: ExtraData;
    endpoint?: string;
    debug?: boolean;
}) => TUseForm;

type ValidationErrorProps = {
    prefix?: string;
    field?: string;
    errors: FormError$1[];
    [x: string]: any;
};
declare const ValidationError: React.FC<ValidationErrorProps>;

export { ErrorPayload, ExtraData, ExtraDataValue, FieldError, FormError, FormspreeProvider, FormspreeProviderProps, FromspreeContextType, TUseForm, ValidationError, ValidationErrorProps, useForm, useFormspree };
