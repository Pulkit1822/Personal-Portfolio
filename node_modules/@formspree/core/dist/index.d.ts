import { PaymentMethodResult, Stripe } from '@stripe/stripe-js';

type SubmissionData = FormData | any;
interface SubmissionOptions {
    endpoint?: string;
    clientName?: string;
    fetchImpl?: typeof fetch;
    createPaymentMethod?: () => Promise<PaymentMethodResult>;
}
declare enum FormErrorCodeEnum {
    INACTIVE = "INACTIVE",
    BLOCKED = "BLOCKED",
    EMPTY = "EMPTY",
    PROJECT_NOT_FOUND = "PROJECT_NOT_FOUND",
    FORM_NOT_FOUND = "FORM_NOT_FOUND",
    NO_FILE_UPLOADS = "NO_FILE_UPLOADS",
    TOO_MANY_FILES = "TOO_MANY_FILES",
    FILES_TOO_BIG = "FILES_TOO_BIG",
    STRIPE_CLIENT_ERROR = "STRIPE_CLIENT_ERROR",
    STRIPE_SCA_ERROR = "STRIPE_SCA_ERROR"
}
declare enum FieldErrorCodeEnum {
    REQUIRED_FIELD_MISSING = "REQUIRED_FIELD_MISSING",
    REQUIRED_FIELD_EMPTY = "REQUIRED_FIELD_EMPTY",
    TYPE_EMAIL = "TYPE_EMAIL",
    TYPE_NUMERIC = "TYPE_NUMERIC",
    TYPE_TEXT = "TYPE_TEXT"
}
type FormErrorCode = keyof typeof FormErrorCodeEnum;
type FieldErrorCode = keyof typeof FieldErrorCodeEnum;
interface FormError {
    field?: string;
    code?: FormErrorCode | FieldErrorCode;
    message: string;
    details?: {
        stripeCode?: string;
    };
}
interface FieldError extends FormError {
    field: string;
    code: FieldErrorCode;
}
declare function isFieldError(error: FormError): error is FieldError;
interface SuccessBody {
    id: string;
    data: object;
}
interface ErrorBody {
    errors: FormError[];
}
type SubmissionBody = SuccessBody | ErrorBody;
interface SubmissionResponse {
    body: SubmissionBody;
    response: Response | null;
}

interface Config {
    project?: string;
    stripePromise?: Stripe;
}
declare class Client {
    project: string | undefined;
    stripePromise: Stripe | undefined;
    private session;
    constructor(config?: Config);
    /**
     * Starts a browser session.
     */
    startBrowserSession(): void;
    /**
     * Teardown the client session.
     */
    teardown(): void;
    /**
     * Submit a form.
     *
     * @param formKey - The form key.
     * @param data - An object or FormData instance containing submission data.
     * @param args - An object of form submission data.
     */
    submitForm(formKey: string, data: SubmissionData, opts?: SubmissionOptions): Promise<SubmissionResponse>;
}
/**
 * Constructs the client object.
 */
declare const createClient: (config?: Config) => Client;
/**
 * Fetches the global default client.
 */
declare const getDefaultClient: () => Client;

declare class Session {
    loadedAt: number;
    webdriver: boolean;
    constructor();
    teardown(): void;
    data(): {
        loadedAt: number;
        webdriver: boolean;
    };
}

export { Client, Config, ErrorBody, FieldError, FormError, Session, SubmissionData, SubmissionResponse, createClient, getDefaultClient, isFieldError };
