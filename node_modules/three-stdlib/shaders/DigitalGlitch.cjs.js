"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const t={uniforms:{tDiffuse:{value:null},tDisp:{value:null},byp:{value:0},amount:{value:.08},angle:{value:.02},seed:{value:.02},seed_x:{value:.02},seed_y:{value:.02},distortion_x:{value:.5},distortion_y:{value:.6},col_s:{value:.05}},vertexShader:"varying vec2 vUv;\n     void main() {\n     \t vUv = uv;\n     \t gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n     }",fragmentShader:"uniform int byp; //should we apply the glitch ?\n     uniform sampler2D tDiffuse;\n     uniform sampler2D tDisp;\n     uniform float amount;\n     uniform float angle;\n     uniform float seed;\n     uniform float seed_x;\n     uniform float seed_y;\n     uniform float distortion_x;\n     uniform float distortion_y;\n     uniform float col_s;\n\n     varying vec2 vUv;\n\n     float rand(vec2 co){\n     \t return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n     }\n\n     void main() {\n     \tif(byp<1) {\n     \t\tvec2 p = vUv;\n     \t\tfloat xs = floor(gl_FragCoord.x / 0.5);\n     \t\tfloat ys = floor(gl_FragCoord.y / 0.5);\n    //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n     \t\tvec4 normal = texture2D (tDisp, p*seed*seed);\n     \t\tif(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\n     \t\t\tif(seed_x>0.){\n     \t\t\t\tp.y = 1. - (p.y + distortion_y);\n     \t\t\t}\n     \t\t\telse {\n     \t\t\t\tp.y = distortion_y;\n     \t\t\t}\n     \t\t}\n     \t\tif(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\n     \t\t\tif(seed_y>0.){\n     \t\t\t\tp.x=distortion_x;\n     \t\t\t}\n     \t\t\telse {\n     \t\t\t\tp.x = 1. - (p.x + distortion_x);\n     \t\t\t}\n     \t\t}\n     \t\tp.x+=normal.x*seed_x*(seed/5.);\n     \t\tp.y+=normal.y*seed_y*(seed/5.);\n    //base from RGB shift shader\n     \t\tvec2 offset = amount * vec2( cos(angle), sin(angle));\n     \t\tvec4 cr = texture2D(tDiffuse, p + offset);\n     \t\tvec4 cga = texture2D(tDiffuse, p);\n     \t\tvec4 cb = texture2D(tDiffuse, p - offset);\n     \t\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n    //add noise\n     \t\tvec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\n     \t\tgl_FragColor = gl_FragColor+ snow;\n     \t}\n     \telse {\n     \t\tgl_FragColor=texture2D (tDiffuse, vUv);\n     \t}\n    }"};exports.DigitalGlitch=t;
