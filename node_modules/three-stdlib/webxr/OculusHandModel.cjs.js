"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@babel/runtime/helpers/defineProperty"),t=require("three"),o=require("./XRHandMeshModel.cjs.js");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}require("../loaders/GLTFLoader.cjs.js"),require("../BufferGeometryUtils-903f7ecb.js"),require("../types/helpers.cjs.js");var s=r(e);class n extends t.Object3D{constructor(e,t,r){super(),s.default(this,"controller",void 0),s.default(this,"motionController",void 0),s.default(this,"envMap",void 0),s.default(this,"mesh",void 0),s.default(this,"xrInputSource",void 0),this.controller=e,this.motionController=null,this.envMap=null,this.mesh=null,this.xrInputSource=null,e.addEventListener("connected",(s=>{const n=s.data;n.hand&&!this.motionController&&(this.xrInputSource=n,this.motionController=new o.XRHandMeshModel(this,e,void 0,n.handedness,"left"===n.handedness?t:r))})),e.addEventListener("disconnected",(()=>{this.dispose()}))}updateMatrixWorld(e){super.updateMatrixWorld(e),this.motionController&&this.motionController.updateMesh()}getPointerPosition(){const e=this.controller.joints["index-finger-tip"];return e?e.position:null}intersectBoxObject(e){const o=this.getPointerPosition();if(o){const r=new t.Sphere(o,.01),s=(new t.Box3).setFromObject(e);return r.intersectsBox(s)}return!1}checkButton(e){this.intersectBoxObject(e)?e.onPress():e.onClear(),e.isPressed()&&e.whilePressed()}dispose(){this.clear(),this.motionController=null}}exports.OculusHandModel=n;
